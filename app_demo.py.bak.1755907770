#!/usr/bin/env python3
from pathlib import Path
from time import perf_counter
from typing import Any

from flask import Flask, request, send_from_directory, jsonify

from coil_classifier import (
    coil_classify,
    footprint_for_semiprime,
    geometry_signature,
    invariant_signature,
)

# --- Paths -------------------------------------------------------------------
APP_DIR = Path(__file__).parent.resolve()
WEB_DIR = APP_DIR / "web"
CACHE_DIR = APP_DIR / "cache"
WEB_DIR.mkdir(exist_ok=True)
CACHE_DIR.mkdir(exist_ok=True)

# --- Flask app ---------------------------------------------------------------
app = Flask(__name__, static_folder=str(WEB_DIR))


# --- Safe parsers ------------------------------------------------------------
def _to_int(x: Any, default: int) -> int:
    try:
        s = str(x)
        if not s or s.lower() == "none":
            return default
        return int(s)
    except Exception:
        return default


def _to_float(x: Any, default: float) -> float:
    try:
        s = str(x)
        if not s or s.lower() == "none" or s.startswith("[object "):
            return default
        return float(s)
    except Exception:
        return default


# --- Tiny helpers ------------------------------------------------------------
def _is_prime(n: int) -> bool:
    if n < 2:
        return False
    if n % 2 == 0:
        return n == 2
    i = 3
    while i * i <= n:
        if n % i == 0:
            return False
        i += 2
    return True


def _trial_semiprime(n: int):
    """Small, fast trial division to detect semiprimes."""
    if n % 2 == 0:
        p, q = 2, n // 2
        return (p, q) if _is_prime(q) else None
    i = 3
    while i * i <= n and i <= 10_000_000:
        if n % i == 0:
            p, q = i, n // i
            return (p, q) if _is_prime(p) and _is_prime(q) else None
        i += 2
    return None


# --- Web UI ------------------------------------------------------------------
@app.get("/")
def index():
    return send_from_directory(WEB_DIR, "index.html")


@app.get("/web/<path:filename>")
def web_static(filename: str):
    return send_from_directory(WEB_DIR, filename)


@app.get("/healthz")
def healthz():
    return "ok"


# --- API: classify -----------------------------------------------------------
@app.get("/api/classify")
def api_classify():
    n = _to_int(request.args.get("n", "0"), 0)
    if n <= 0:
        return jsonify(error="bad n"), 400

    r0 = _to_float(request.args.get("r0", 1.0), 1.0)
    alpha = _to_float(request.args.get("alpha", 0.0125), 0.0125)
    beta = _to_float(request.args.get("beta", 0.005), 0.005)
    L = _to_float(request.args.get("L", 360.0), 360.0)

    klass = coil_classify(n)
    out = {"n": n, "class": klass}

    if klass == "semiprime":
        try:
            fp = footprint_for_semiprime(n, r0, alpha, beta, L)
        except Exception as e:
            out.update(
                {
                    "primes": [],
                    "normalized": {},
                    "balance": None,
                    "bit_gap": None,
                    "sig_geom": None,
                    "sig_invariant": None,
                    "footprint_error": str(e),
                }
            )
        else:
            out.update(fp)
            try:
                out["sig_geom"] = geometry_signature(n, fp, r0, alpha, beta, L)
            except Exception:
                pass
            try:
                out["sig_invariant"] = invariant_signature(n, fp)
            except Exception:
                pass

    return jsonify(out)


# --- API: factor -------------------------------------------------------------
@app.get("/api/factor")
def api_factor():
    # New path: small trial first, then Pollard Rho with a time budget
    from fast_factor import factor_semiprime as _rho_factor
    n = _to_int(request.args.get("n", "0"), 0)
    if n <= 0:
        return jsonify(error="bad n"), 400

    budget = _to_int(request.args.get("budget_ms", "0"), 0) or 2000
    t0 = perf_counter()

    # Quick exact checks
    if _is_prime(n):
        return jsonify({"class": "prime", "n": n, "ms": (perf_counter() - t0) * 1000.0})

    pair = _trial_semiprime(n)
    if pair:
        p, q = pair
        return jsonify({
            "class":"semiprime","n":n,"factors":[int(p),int(q)],
            "method":"trial","ms":(perf_counter()-t0)*1000.0
        })

    # Heavier: Pollard Rho (Brent) with time budget
    rho = _rho_factor(n, max_ms=budget)
    if rho:
        p, q, how = rho
        return jsonify({
            "class":"semiprime","n":n,"factors":[int(p),int(q)],
            "method":how,"ms":(perf_counter()-t0)*1000.0
        })

    return jsonify({
        "class":"other","n":n,"factors":[],
        "method":"trial+rho_timeout","ms":(perf_counter()-t0)*1000.0
    })
